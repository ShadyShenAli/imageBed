{"version":3,"file":"functions.js","mappings":"AA4EAA,gBAAgBC,UAAU,OAlE1B,SAAaC,EAAOC,GAClB,OAAOD,EAAQC,CACjB,IAiEAH,gBAAgBC,UAAU,SA1D1B,SAAeG,GACb,IAAMC,EAAQC,aAAY,WACxB,IAAMC,GAcD,IAAIC,MAAOC,qBAbhBL,EAAWM,UAAUH,EACvB,GAAG,KAEHH,EAAWO,WAAa,WACtBC,cAAcP,EAChB,CACF,IAkDAL,gBAAgBC,UAAU,aAlC1B,SAAmBY,EAAaT,GAC9B,IAAIU,EAAS,EACPT,EAAQC,aAAY,WACxBQ,GAAUD,EACVT,EAAWM,UAAUI,EACvB,GAAG,KAEHV,EAAWO,WAAa,WACtBC,cAAcP,EAChB,CACF,IAyBAL,gBAAgBC,UAAU,OAjB1B,SAAoBc,GAGlB,OAFAC,QAAQC,IAAIF,GAELA,CACT,IAcAf,gBAAgBC,UAAU,cAP1B,WACE,OAAOiB,KAAKC,MAAsB,EAAhBD,KAAKE,UAAgB,CACzC","sources":["webpack://excel-custom-functions-js/./src/functions/functions.js"],"sourcesContent":["/* eslint-disable @typescript-eslint/no-unused-vars */\n/* global console setInterval, clearInterval */\n\n/**\n * Add two numbers\n * @customfunction\n * @param {number} first First number\n * @param {number} second Second number\n * @returns {number} The sum of the two numbers.\n */\nfunction add(first, second) {\n  return first + second;\n}\n\n/**\n * Displays the current time once a second\n * @customfunction\n * @param {CustomFunctions.StreamingInvocation<string>} invocation Custom function invocation\n */\nfunction clock(invocation) {\n  const timer = setInterval(() => {\n    const time = currentTime();\n    invocation.setResult(time);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Returns the current time\n * @returns {string} String with the current time formatted for the current locale.\n */\nfunction currentTime() {\n  return new Date().toLocaleTimeString();\n}\n\n/**\n * Increments a value once a second.\n * @customfunction\n * @param {number} incrementBy Amount to increment\n * @param {CustomFunctions.StreamingInvocation<number>} invocation\n */\nfunction increment(incrementBy, invocation) {\n  let result = 0;\n  const timer = setInterval(() => {\n    result += incrementBy;\n    invocation.setResult(result);\n  }, 1000);\n\n  invocation.onCanceled = () => {\n    clearInterval(timer);\n  };\n}\n\n/**\n * Writes a message to console.log().\n * @customfunction LOG\n * @param {string} message String to write.\n * @returns String to write.\n */\nfunction logMessage(message) {\n  console.log(message);\n\n  return message;\n}\n\n/**\n * Simulates rolling a 6-sided dice.\n * @customfunction\n * @volatile\n */\nfunction roll6sided() {\n  return Math.floor(Math.random() * 6) + 1;\n}\nCustomFunctions.associate(\"ADD\", add);\nCustomFunctions.associate(\"CLOCK\", clock);\nCustomFunctions.associate(\"INCREMENT\", increment);\nCustomFunctions.associate(\"LOG\", logMessage);\nCustomFunctions.associate(\"ROLL6SIDED\", roll6sided);"],"names":["CustomFunctions","associate","first","second","invocation","timer","setInterval","time","Date","toLocaleTimeString","setResult","onCanceled","clearInterval","incrementBy","result","message","console","log","Math","floor","random"],"sourceRoot":""}